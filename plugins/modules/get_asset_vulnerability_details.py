# (c) 2024, Fernando Mendieta (fernandomendietaovejero@gmail.com)
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

__metaclass__ = type


DOCUMENTATION = r"""
---
module: get_asset_vulnerability_details
short_description: Retrieves the details for a vulnerability recorded on a specified asset.
version_added: "0.0.1"
description:
  - This module retrieves the details for a vulnerability recorded on a specified asset.
  - Multiple filters can be applied and get full of default info rmo assets.
  - Note This endpoint is not intended for large or frequent exports of vulnerability or assets data
  - For information and best practices for retrieving vulnerability see https://developer.tenable.com/docs/retrieve-vulnerability-data-from-tenableio
  - For information and best practices for retrieving assets see https://developer.tenable.com/docs/retrieve-asset-data-from-tenableio
  - Requires BASIC [16] user permissions as specified in the Tenable.io API documentation.
  - This module was made from https://developer.tenable.com/reference/workbenches-asset-vulnerability-info docs.
author:
  - Fernando Mendieta Ovejero (@valkiriaaquatica)
extends_documentation_fragment:
  - valkiriaaquatica.tenable.credentials
  - valkiriaaquatica.tenable.asset
  - valkiriaaquatica.tenable.plugin
  - valkiriaaquatica.tenable.date
  - valkiriaaquatica.tenable.filters
  - valkiriaaquatica.tenable.filter_search_type
"""


EXAMPLES = r"""
- name: Get details of the plugin
  get_asset_vulnerability_details:
    access_key: "{{ tenable_access_key }}"
    secret_key: "{{ tenable_secret_key }}"
    asset_id: "123456"
    plugin_id: "987654"

- name: Get details of the plugin using filters and enviroment creds in last five days
  get_asset_vulnerability_details:
    asset_id: "123456"
    plugin_id: "987654"
    date_range: 5
    filters:
      - type: plugin.name
        operator: match
        value: RHEL
"""

RETURN = r"""
api_response:
  description: The API response containing a list of assets.
  type: dict
  returned: on success
  contains:
    data:
      description: A list of assets retrieved from the API.
      type: dict
      contains:
        assets:
          description: Details of each asset including various descriptive and technical attributes.
          type: list
          elements: dict
          sample:
            - info:
                accepted_count: 0
                count: 1
                description: "Nessus."
                discovery:
                  seen_first: "date"
                  seen_last: "date"
                plugin_details:
                  family: "Port scanners"
                  modification_date: "date"
                  name: "Netstat Portscanner (SSH)"
                  publication_date: "date"
                  severity: 0
                  type: "local"
                  version: "1.101"
                recasted_count: 0
                reference_information: []
                risk_information:
                  cvss3_base_score: null
                  cvss3_temporal_score: null
                  cvss3_temporal_vector: null
                  cvss3_vector: null
                  cvss_base_score: null
                  cvss_temporal_score: null
                  cvss_temporal_vector: null
                  cvss_vector: null
                  risk_factor: "INFO"
                  stig_severity: null
                see_also:
                  - "https://en.wikipedia.org/wiki/Netstat"
                severity: 0
                solution: null
                state: "ACTIVE"
                synopsis: "Remote open ports can be enumerated via SSH."
                vpr:
                  drivers:
                    age_of_vuln:
                      lower_bound: null
                    cvss3_impact_score: null
                    cvss_impact_score_predicted: null
                    exploit_code_maturity: null
                    product_coverage: null
                    threat_intensity_last28: null
                    threat_sources_last28: null
                  score: null
                  updated: null
                vuln_count: 1
                vulnerability_information:
                  asset_inventory: "False"
                  cpe: null
                  default_account: false
                  exploit_available: null
                  exploit_frameworks: []
                  exploitability_ease: null
                  exploited_by_malware: false
                  exploited_by_nessus: false
                  in_the_news: false
                  malware: false
                  patch_publication_date: null
                  unsupported_by_vendor: false
                  vulnerability_publication_date: null
    status_code:
      description: HTTP status code of the response.
      type: int
      returned: always
      sample: 200
"""


from ansible_collections.valkiriaaquatica.tenable.plugins.module_utils.arguments import get_spec
from ansible_collections.valkiriaaquatica.tenable.plugins.module_utils.parameter_actions import add_custom_filters
from ansible_collections.valkiriaaquatica.tenable.plugins.module_utils.parameter_actions import build_query_parameters
from ansible_collections.valkiriaaquatica.tenable.plugins.module_utils.parameter_actions import handle_multiple_filters
from ansible_collections.valkiriaaquatica.tenable.plugins.module_utils.simple_requests import run_module

from ansible.module_utils.basic import AnsibleModule


def main():
    argument_spec = get_spec(
        "access_key", "secret_key", "asset_uuid", "plugin_id", "date_range", "filters", "filter_search_type"
    )
    module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False)
    endpoint = f"workbenches/assets/{module.params['asset_id']}/vulnerabilities/{module.params['plugin_id']}/info"

    def query_params():
        return add_custom_filters(
            build_query_parameters(
                date_range=module.params["date_range"], filter_search_type=module.params["filter_search_type"]
            ),
            module.params["filters"],
            handle_multiple_filters,
        )

    run_module(module, endpoint, query_params_func=query_params, method="GET")


if __name__ == "__main__":
    main()
